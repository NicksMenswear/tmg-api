name: _e2e_tests

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        description: SHA, branch or tag to checkout
      stage:
        required: true
        type: string
        description: Stage to run tests against
      viewport:
        type: string
        description: Device to run tests on
        default: mobile
      browser:
        required: false
        type: string
        default: chromium
        description: Browser to run tests on
      load:
        required: false
        type: number
        default: 1
        description: Load multiplier
      notify:
        required: false
        type: boolean
        default: true
        description: Notify Slack
    secrets:
      DATADOG_API_KEY:
        required: true
      SLACK_BOT_TOKEN:
        required: false  # required when notify is true
      X_API_ACCESS_TOKEN:
        required: true
      SHOPIFY_ADMIN_API_ACCESS_TOKEN:
        required: true

jobs:
  setup: 
    runs-on: ubuntu-latest
    outputs:
      groups: ${{ steps.set-matrix.outputs.groups }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ inputs.viewport }}" = "mobile" ]; then
            echo groups='[1,2,3,4,5,6,7,8,9,10]' >> $GITHUB_OUTPUT
          elif [ "${{ inputs.viewport }}" = "desktop" ]; then
            echo groups='[1,2,3,4,5,6,7,8,9,10]' >> $GITHUB_OUTPUT
          else 
            echo groups='[1,2,3,4,5,6,7,8,9,10]' >> $GITHUB_OUTPUT
          fi

  e2e-test:
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ inputs.stage }}
    strategy:
      fail-fast: false
      matrix:
        group: ${{ fromJson(needs.setup.outputs.groups) }}
    steps:
      - name: Datadog CI tags
        env:
          DATADOG_SITE: us5.datadoghq.com
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" --output "/usr/local/bin/datadog-ci" && chmod +x /usr/local/bin/datadog-ci
          datadog-ci tag --level job --tags "env:${{ inputs.stage }}"

      - name: Echo Environment
        run: echo "Running tests on ${{ inputs.stage }} in ${{ inputs.browser }} browser"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and run end-to-end tests
        run: ./test-e2e.sh
        env:
          ACTIVE_ENV: ${{ inputs.stage }}
          BROWSER: ${{ inputs.browser }}
          VIEWPORT: ${{ inputs.viewport }}
          LOAD: ${{ inputs.load }}
          TEST_GROUP: group-${{ matrix.group }}
          SHOPIFY_STORE_HOST: ${{ env.SHOPIFY_STORE_HOST }}
          SHOPIFY_ADMIN_API_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ADMIN_API_ACCESS_TOKEN }}

      - name: Clean up
        if: always()
        run: docker-compose down

      - name: Notify to Slack
        if: ${{ failure() && inputs.notify }}
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'C06KT69EN30' # Notifications
          slack-message: |
            *E2E "${{ inputs.stage }}" group-${{ matrix.group }} failed* :red_circle:
            *Ref:* "${{ inputs.ref }}"
            *Logs:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  e2e-clean-up:
    needs: e2e-test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Clean up e2e test data from Shopify and DB
        run: |
          export STAGE=${{ inputs.stage }}
          export X_API_ACCESS_TOKEN=${{ secrets.X_API_ACCESS_TOKEN }}
          ops/run-e2e-clean-up.sh

  e2e-clean-up-ac:
    needs: e2e-test
    if: ${{ always() && inputs.stage == 'prd' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Clean up e2e test data from Active Campaign
        run: |
          export STAGE=${{ inputs.stage }}
          export X_API_ACCESS_TOKEN=${{ secrets.X_API_ACCESS_TOKEN }}
          ops/run-e2e-ac-clean-up.sh
