name: _sls_deploy

on:
  workflow_call:
    inputs: 
      ref:
        required: true
        type: string
        description: SHA, branch or tag to checkout
      stage:
        required: true
        type: string
        description: Stage to deploy to
      url:
        required: true
        type: string
        description: URL of environment to show in GitHub UI
      release_semver:
        required: false
        type: string
        description: Release semver to use
      release_reuse:
        required: false
        type: boolean
        default: false  
        description: Create or reuse GitHub release
      notify:
        required: false
        type: boolean
        default: true
        description: Notify Slack
    secrets:
      DATADOG_API_KEY:
        required: true
      SLACK_BOT_TOKEN:
        required: false  # required when notify is true

concurrency:
  group: sls-deploy-${{ inputs.stage }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.stage }}
      url: ${{ inputs.url }}
    timeout-minutes: 20
    env:
      SLS_ARGS: ""
      API_ZIP: "tmg-api.zip"
      VERSION: ${{ inputs.release_semver != '' && inputs.release_semver || github.sha }}
      ACCOUNT: ${{ inputs.stage == 'prd' && '729911029963' || '828867313984' }}
      REGION: ${{ inputs.stage == 'prd' && 'us-east-1' || 'us-west-2' }}

    steps:
      - name: Datadog CI tags
        env:
          DATADOG_SITE: us5.datadoghq.com
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" --output "/usr/local/bin/datadog-ci" && chmod +x /usr/local/bin/datadog-ci
          datadog-ci tag --level job --tags "env:${{ inputs.stage }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Get head commit message
        id: get_head_commit_message
        run: |
          if ${{ inputs.release_reuse }}; then
            echo "HEAD_COMMIT_MESSAGE=$(git show -s --format='%h \"%s\" by %an' ${{ inputs.release_semver }})" >> $GITHUB_OUTPUT
          else
            echo "HEAD_COMMIT_MESSAGE=$(git log -1 --pretty=format:'%h "%s" by %an')" >> $GITHUB_OUTPUT
          fi

      - name: Notify slack
        if: ${{ inputs.notify }}
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'C06KT69EN30' # Notifications
          slack-message: |
            *API "${{ inputs.stage }}" now deploying:* ${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}
            *Release:* ${{ env.VERSION }}
            *Logs:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Install sls
        run: npm install -g serverless@3.38.*

      - name: Install sls dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT }}:role/SlsDeploy

      - name: Write release version
        run: echo "${{ env.VERSION }}" > ./VERSION

      - name: Download release artifacts
        if: ${{ inputs.release_semver != '' && inputs.release_reuse }}
        uses: robinraju/release-downloader@v1.10
        with:
          tag: ${{ inputs.release_semver }}
          fileName: ${{ env.API_ZIP }}

      - name: Set release artifacts in sls deploy
        if: ${{ inputs.release_semver != '' && inputs.release_reuse }}
        run: |
          rm requirements.txt
          echo SLS_ARGS="${SLS_ARGS} --param='artifact=${{ env.API_ZIP }}'" >> $GITHUB_ENV

      - name: Sls Deploy
        run: sls deploy ${{ env.SLS_ARGS }} --stage ${{ inputs.stage }}

      - name: Create GitHub release and upload artifacts
        if: ${{ inputs.release_semver != '' && ! inputs.release_reuse }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_semver }}
          target_commitish: ${{ inputs.ref }}
          generate_release_notes: true
          make_latest: true
          files: |
            .serverless/${{ env.API_ZIP }}
          fail_on_unmatched_files: true

      - name: Append deployment log to GitHub release
        if: ${{ inputs.release_semver != '' }}
        uses: actions/github-script@v7
        with:
          script: |
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: "${{ inputs.release_semver }}"
              });

              const date = new Date().toISOString();
              const logs = `[CI Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              const appendBody = `**\`${{ inputs.stage }}\` deployed:** ${date}. ${logs}`;
              
              github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + "\n\n" + appendBody
              });

      - name: Notify slack
        if: ${{ always() && inputs.notify }}
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'C06KT69EN30' # Notifications
          slack-message: |
            *API "${{ inputs.stage }}" deployment ${{ job.status }} ${{ job.status == 'success' && ':large_green_circle:' || job.status == 'cancelled' && ':large_yellow_circle:' || ':red_circle:' }}*
            *Commit:* ${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}
            *Release:* ${{ env.VERSION }}
            *Logs:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
