name: _sls_deploy

on:
  workflow_call:
    inputs: 
      ref:
        required: true
        type: string
        description: SHA, branch or tag to checkout
      stage:
        required: true
        type: string
        description: Stage to deploy to
      release_semver:
        required: false
        type: string
        description: Create GitHub release with semver
      notify:
        required: false
        type: boolean
        default: true
        description: Notify Slack
      cfn_deploy:
        required: false
        type: boolean
        default: true
        description: Deploy via CloudFormation
    secrets:
      DATADOG_API_KEY:
        required: true
      SLACK_BOT_TOKEN:
        required: false  # required when notify is true
      SENTRY_AUTH_TOKEN:
        required: false  # required when release_semver is true

concurrency:
  group: sls-deploy-${{ inputs.stage }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    timeout-minutes: 20
    env:
      SLS_ARGS: ""
      API_ZIP: "tmg-api.zip"

    steps:
      - name: Datadog CI tags
        env:
          DATADOG_SITE: us5.datadoghq.com
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" --output "/usr/local/bin/datadog-ci" && chmod +x /usr/local/bin/datadog-ci
          datadog-ci tag --level job --tags "env:${{ inputs.stage }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Get head commit message
        id: get_head_commit_message
        run: |
          echo "HEAD_COMMIT_MESSAGE=$(git log -1 --pretty=format:'%h "%s" by %an')" >> $GITHUB_OUTPUT

      - name: Notify slack
        if: ${{ inputs.notify }}
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'C06KT69EN30' # Notifications
          slack-message: |
            *API "${{ inputs.stage }}" now deploying:* ${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}
            *Release:* ${{ inputs.release_semver != '' && inputs.release_semver || inputs.ref }}
            *Logs:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          
      # - name: Set function deploy mode
      #   if: ${{ ! inputs.cfn_deploy }}
      #   run: |
      #     echo "SLS_ARGS=${SLS_ARGS} function --function api" >> $GITHUB_ENV

      - name: Reuse release artifact for prd
        if: ${{ inputs.stage == 'prd' && inputs.release_semver }}
        run: |
          curl -sSL -o .serverless/${{ env.API_ZIP }} https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_semver }}/${{ env.API_ZIP }}
          echo "SLS_ARGS=${SLS_ARGS} --package .serverless/${{ env.API_ZIP }}" >> $GITHUB_ENV

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 21

      - name: Install Serverless
        run: npm install -g serverless@3.38.*

      - name: Install Serverless dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::828867313984:role/SlsDeploy

      - name: Sls Deploy
        run: sls deploy ${{ env.SLS_ARGS }} --stage ${{ inputs.stage }}

      # - name: Update API Gateway
      #   if: ${{ ! inputs.cfn_deploy }}
      #   run: | 
      #     rest_api_name="${{ inputs.stage }}-tmg-api"
      #     aws apigateway get-rest-apis --query "items[?name=='$rest_api_name'].id" --output text
      #     aws apigateway create-deployment --rest-api-id "$rest_api_id" --stage-name ${{ inputs.stage }}

      - name: Create GitHub release
        if: ${{ inputs.release_semver != '' }} 
        # # && inputs.stage == 'stg' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_semver }}
          target_commitish: ${{ inputs.ref }}
          generate_release_notes: true
          make_latest: true
          files: |
            .serverless/${{ env.API_ZIP }}
          fail_on_unmatched_files: true

      - name: Get release deployment timestamp
        if: ${{ inputs.release_semver != '' }}
        id: time
        run: |
          echo "NOW=$(date)" >> $GITHUB_OUTPUT
  
      - name: Append deployment log to GitHub release
        if: ${{ inputs.release_semver != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_semver }}
          target_commitish: ${{ inputs.ref }}
          append_body: true
          body: |
          
            ---
            **Deployed to "${{ inputs.stage }}"":** ${{ steps.time.outputs.NOW }}. [Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Create Sentry release
        if: ${{ inputs.release_semver != '' }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: the-modern-groom
          SENTRY_PROJECT: tmg-api
        with:
          environment: ${{ inputs.stage }}

      - name: Notify slack
        if: ${{ always() && inputs.notify }}
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'C06KT69EN30' # Notifications
          slack-message: |
            *API "${{ inputs.stage }}" deployment ${{ job.status }} ${{ job.status == 'success' && ':large_green_circle:' || job.status == 'cancelled' && ':large_yellow_circle:' || ':red_circle:' }}*
            *Commit:* ${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}
            *Release:* ${{ inputs.release_semver != '' && inputs.release_semver || inputs.ref }}
            *Logs:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
