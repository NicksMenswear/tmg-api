openapi: 3.0.3
info:
  description:
    API for The Modern Groom, providing a platform to manage users, events,
    and orders for a modern event planning experience.
  title: The Modern Groom API
  version: 1.0.0
servers:
  - url: /
tags:
  - description:
      Operations related to user accounts, including registration, profile
      management, and user-specific queries.
    name: Users
  - description:
      All event-related actions such as creating, updating, listing, and
      managing event details.
    name: Events
  - description:
      Manages customer orders including order creation, retrieval, updating,
      and tracking.
    name: Orders
  - description:
      Handles product items, encompassing product listings, item details,
      and product management operations.
    name: Product
  - description:
      Provides access to audit logs, tracking changes made within the system
      for compliance and monitoring.
    name: Audit
paths:
  /:
    get:
      operationId: get_default
      responses:
        "200":
          description: Successful response
      summary: TMG API
      tags:
        - Default
      x-openapi-router-controller: server.controllers.default
  /health:
    get:
      operationId: health
      responses:
        "200":
          description: Successful response
      summary: TMG Health Check
      tags:
        - Health
      x-openapi-router-controller: server.controllers.health

  /users:
    post:
      operationId: create_user
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        x-body-name: user_data
      responses:
        "201":
          description: User created
      summary: Create user
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{email}:
    get:
      operationId: get_user_by_email
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: email
          required: true
          schema:
            $ref: '#/components/schemas/email'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Details of the user
        "404":
          description: User not found
      summary: Get a single user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}:
    put:
      operationId: update_user
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
        required: true
        x-body-name: user_data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Details of the user
        "404":
          description: User not found
      summary: Update single user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}/events:
    get:
      operationId: get_user_events
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
          description: Collection of user events
      summary: Get a single user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}/invites:
    get:
      operationId: get_user_invites
      parameters:
        - description: Gets list of invites for a user
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
          description: Collection of events that user is invited to
      summary: Collection of events that user is invited to
      tags:
        - Users
        - Events
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}/looks:
    get:
      operationId: get_user_looks
      parameters:
        - description: Gets list of looks for a user
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
          description: Collection of looks that user has
      summary: Collection of looks that user has
      tags:
        - Users
        - Looks
      x-openapi-router-controller: server.controllers.users

  /events:
    post:
      operationId: create_event
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
        x-body-name: event
      responses:
        "201":
          description: Event created
      summary: Create event
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}:
    get:
      operationId: get_event
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: enriched
          schema:
            type: boolean
          required: false
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
          description: Details of the event
        "404":
          description: Event not found
      summary: Get a single event by ID
      tags:
        - Event
      x-openapi-router-controller: server.controllers.events
    put:
      operationId: update_event
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
        required: true
        x-body-name: event_data
      responses:
        "200":
          description: Event Updated Success
      summary: Update event
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
    delete:
      operationId: soft_delete_event
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "204":
          description: Event Deleted Success
      summary: Event Delete
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}/roles:
    get:
      operationId: get_event_roles
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: enriched
          schema:
            type: boolean
          required: false
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Role"
                type: array
          description: Collection of roles for event
        "404":
          description: Event not found
      summary: Get a single event by ID
      tags:
        - Event
        - Role
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}/attendees:
    get:
      operationId: get_event_attendees
      parameters:
        - description: ID of the event
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Attendee"
                type: array
          description: Collection of attendees for event
        "404":
          description: Event not found
      summary: Get a collection of attendees by event id
      tags:
        - Event
        - Attendee
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}/discounts:
    get:
      operationId: get_discounts
      parameters:
        - description: ID of the event
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Discount"
                type: array
          description: Collection of discounts for event
      summary: Get a collection of discounts by event id
      x-openapi-router-controller: server.controllers.discounts
    post:
      operationId: create_discount_intents
      parameters:
        - description: ID of the event
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/CreateDiscountIntent"
              type: array
        required: true
        x-body-name: intents
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Discount"
                type: array
          description: An array of discounts created
      summary: Create discount intents
      x-openapi-router-controller: server.controllers.discounts

  /looks:
    post:
      operationId: create_look
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Look'
        required: true
        x-body-name: look_data
      responses:
        "201":
          description: Look created
      summary: Create look
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
  /looks/{look_id}:
    get:
      operationId: get_look
      parameters:
        - explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single look by id
      summary: Get single look by id
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
    put:
      operationId: update_look
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLook'
        required: true
        x-body-name: look_data
      responses:
        "200":
          description: Look updated
        "404":
          description: Look not found
      summary: Update a Look by name
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
    delete:
      operationId: delete_look
      parameters:
        - description: Unique ID of the look to delete
          explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "204":
          description: Look Deleted Successfully
      summary: Delete look
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
  /looks/{look_id}/events:
    get:
      operationId: get_events_for_look
      parameters:
        - explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Collection of events for look by id
      summary: Gets collection for look by id
      tags:
        - Looks
        - Events
      x-openapi-router-controller: server.controllers.looks

  /roles:
    post:
      operationId: create_role
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
        x-body-name: role_data
      responses:
        "201":
          description: role created
      summary: Create role
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles
  /roles/{role_id}:
    get:
      operationId: get_role
      parameters:
        - explode: false
          in: path
          name: role_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single role by id
      summary: Get single role by id
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles
    put:
      operationId: update_role
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: role_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole'
        required: true
        x-body-name: role_data
      responses:
        "200":
          description: Role updated
        "404":
          description: Role not found
        "409":
          description: Duplicate role name
      summary: Update a Role by name
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles
    delete:
      operationId: delete_role
      parameters:
        - description: Id of the role to delete
          explode: false
          in: path
          name: role_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "204":
          description: Role deleted successfully
      summary: Delete role
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles

  /attendees:
    post:
      operationId: create_attendee
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
        required: true
        x-body-name: attendee_data
      responses:
        "201":
          description: Attendee created
      summary: Create attendee
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
  /attendees/{attendee_id}:
    get:
      operationId: get_attendee
      parameters:
        - explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single attendee by id
      summary: Get single attendee by id
      tags:
        - Attendee
      x-openapi-router-controller: server.controllers.attendees
    put:
      operationId: update_attendee
      parameters:
        - description: Unique ID of the attendee
          explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttendee'
        required: true
        x-body-name: attendee_data
      responses:
        "200":
          description: Attendee updated
        "404":
          description: Attendee not found
      summary: Update a Attendee by name
      tags:
        - Attendee
      x-openapi-router-controller: server.controllers.attendees
    delete:
      operationId: soft_delete_attendee
      parameters:
        - description: Unique ID of the attendee to delete
          explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "204":
          description: Attendee Deleted Successfully
      summary: Attendee Delete
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees

  /webhooks/shopify:
    post:
      operationId: shopify_webhook
      parameters:
        - name: X-Shopify-Topic
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShopifyWebhook"
        required: true
        x-body-name: payload
      responses:
        "200":
          description: Webhook received
      summary: Shopify Webhook
      tags:
        - Webhooks
      x-openapi-router-controller: server.controllers.webhooks

  /audit:
    get:
      operationId: list_audit_entries
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AuditLog"
                type: array
          description: An array of audit log entries
      summary: Lists all audit entries
      tags:
        - Audit
      x-openapi-router-controller: server.controllers.audit
  /login:
    get:
      operationId: login_val
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
        - in: query
          name: email
          schema:
            $ref: '#/components/schemas/email'
          required: true
      responses:
        "200":
          description: Successful response
        "404":
          description: User not found
      summary: User Verfication
      tags:
        - Login
      x-openapi-router-controller: server.controllers.login
  /products:
    get:
      operationId: list_product_items
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductItem"
                type: array
          description: An array of product items
      summary: Lists all product items
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product
    post:
      operationId: create_product_item
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
        required: true
        x-body-name: product_item
      responses:
        "201":
          description: Product item created
      summary: Create product item
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product
  /orders:
    delete:
      operationId: delete_order
      parameters:
        - name: order_id
          in: query
          description: Unique identifier of the order to delete
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found
      summary: Delete order by ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
    get:
      operationId: get_orders
      parameters:
        - description: Optional user ID to filter orders
          explode: true
          in: query
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: form
        - description: Optional event ID to filter orders
          explode: true
          in: query
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: form
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Retrieve all orders by user ID or event ID
      summary: Retrieve all orders, optionally filtered by user ID or event ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
    post:
      operationId: create_order
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
        x-body-name: order
      responses:
        "201":
          description: Order created
      summary: Create order
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
    put:
      operationId: update_order
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrder"
        required: true
        x-body-name: order
      responses:
        "200":
          description: Order updated successfully
        "404":
          description: Order not found
        "400":
          description: Bad Request. Invalid input or missing required fields in the request.
      summary: Update an existing order by ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
  /orders/{order_id}:
    get:
      operationId: get_order_by_id
      parameters:
        - description: Unique identifier of the order to retrieve
          explode: false
          in: path
          name: order_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Details of the specific order
        "404":
          description: Order not found
      summary: Retrieve a specific order by ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
  /shopify_customer:
    get:
      operationId: list_customer
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json: { }
      summary: List Shopify customer
      tags:
        - Shopify
      x-openapi-router-controller: server.controllers.shopify
  /invite:
    post:
      operationId: send_invite
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invite'
        required: true
        x-body-name: invite_data
      responses:
        "201":
          description: Invite created
      summary: Create Invite
      tags:
        - Invites
      x-openapi-router-controller: server.controllers.invites
  /carts:
    post:
      operationId: create_cart
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
        x-body-name: cart
      responses:
        "201":
          description: Cart created
      summary: Create cart
      tags:
        - Carts
      x-openapi-router-controller: server.controllers.carts
    put:
      operationId: update_cart
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
        x-body-name: cart
      responses:
        "201":
          description: Cart Updated Success
      summary: Upadte cart
      tags:
        - Carts
      x-openapi-router-controller: server.controllers.carts
  /cart_by_id:
    get:
      operationId: get_cart_by_id
      parameters:
        - description: Retrieve products of cart
          explode: true
          in: query
          name: cart_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: form
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Details of the Cart
        "404":
          description: Cart not found
      summary: Get a single cart by id
      tags:
        - Carts
      x-openapi-router-controller: server.controllers.carts
  /cart_by_event_attendee:
    get:
      operationId: get_cart_by_event_attendee
      parameters:
        - description: Retrieve products of cart
          explode: true
          in: query
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: form
        - description: Retrieve products of cart
          explode: true
          in: query
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: form
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Details of the Cart
        "404":
          description: Cart not found
      summary: Get a single cart by id
      tags:
        - Carts
      x-openapi-router-controller: server.controllers.carts
  /product:
    get:
      operationId: single_product_item
      parameters:
        - in: query
          name: product_id
          schema:
            $ref: '#/components/schemas/uuid'
          required: true
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          description: show single product by id
      summary: List single product
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product
  /update_product:
    put:
      operationId: update_product_item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
        required: true
        x-body-name: product_data
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductItem"
                type: object
          description: update single product by id
      summary: update single product
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product
  /delete_product:
    put:
      operationId: soft_delete_product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteProductItem"
        required: true
        x-body-name: product_data
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: true
        - in: query
          name: shop
          schema:
            type: string
          required: true
        - in: query
          name: path_prefix
          schema:
            type: string
          required: true
        - in: query
          name: timestamp
          schema:
            type: string
          required: true
        - in: query
          name: signature
          schema:
            type: string
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeleteProductItem"
                type: object
          description: Soft Delete Product
      summary: delete product items
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product

components:
  schemas:
    uuid:
      type: string
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      minLength: 36
      maxLength: 36
    email:
      type: string
      pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    User:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        email:
          title: email
          $ref: '#/components/schemas/email'
        shopify_id:
          title: shopify_id
          type: string
        account_status:
          title: account_status
          type: boolean
      required:
        - email
      title: User
      type: object
    UpdateUser:
      properties:
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        shopify_id:
          title: shopify_id
          type: string
        account_status:
          title: account_status
          type: boolean
      title: UpdateUser
      type: object
    Event:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        event_name:
          format: string
          title: event_name
          type: string
        event_date:
          format: date-time
          title: event_date
          type: string
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
      required:
        - user_id
        - event_name
        - event_date
      title: Event
      type: object
    UpdateEvent:
      properties:
        event_name:
          format: string
          title: event_name
          type: string
        event_date:
          format: date-time
          title: event_date
          type: string
      required:
        - event_name
        - event_date
      title: Event
      type: object
    Look:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        look_name:
          title: look_name
          type: string
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        product_specs:
          title: product_specs
          type: object
      required:
        - look_name
        - user_id
      title: Look
      type: object
    UpdateLook:
      properties:
        look_name:
          title: look_name
          type: string
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        product_specs:
          title: product_specs
          type: object
      required:
        - look_name
        - user_id
      title: Look
      type: object
    Role:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        role_name:
          title: look_name
          type: string
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
      required:
        - role_name
      title: Role
      type: object
    UpdateRole:
      properties:
        role_name:
          title: role_name
          type: string
      required:
        - role_name
      title: Role
      type: object
    Attendee:
      properties:
        email:
          title: email
          $ref: '#/components/schemas/email'
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        style:
          title: style
          type: integer
        invite:
          title: invite
          type: integer
        pay:
          title: pay
          type: integer
        size:
          title: size
          type: integer
        ship:
          title: ship
          type: integer
        role:
          title: role
          type: string
          nullable: true
        look_id:
          title: look_id
          $ref: '#/components/schemas/uuid'
          nullable: true
      required:
        - event_id
        - email
        - first_name
        - last_name
      title: Attendee
      type: object
    ShopifyWebhook:
        title: ShopifyWebhook
        type: object
    UpdateAttendee:
      properties:
        style:
          format: int64
          title: style
          type: integer
        invite:
          format: int64
          title: invite
          type: integer
        pay:
          format: int64
          title: pay
          type: integer
        size:
          format: int64
          title: size
          type: integer
        ship:
          format: int64
          title: ship
          type: integer
        role:
          title: role
          type: string
          nullable: true
        look_id:
          title: look_id
          $ref: '#/components/schemas/uuid'
          nullable: true
      required:
        - style
        - invite
        - pay
        - size
        - ship
      title: UpdateAttendee
      type: object

    CreateDiscountIntent:
      properties:
        attendee_id:
          title: attendee_id
          $ref: '#/components/schemas/uuid'
          type: string
        amount:
          format: float
          title: amount
          type: number

    Discount:
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
          type: string
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
          type: string
        attendee_id:
          title: attendee_id
          $ref: '#/components/schemas/uuid'
          type: string
        amount:
          format: float
          title: amount
          type: number
        code:
          title: code
          type: string

    OrderItem:
      example:
        product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        quantity: 5
        price: 2.302136
      properties:
        product_item_id:
          title: product_item_id
          $ref: '#/components/schemas/uuid'
        quantity:
          format: int32
          title: quantity
          type: integer
        price:
          format: float
          title: price
          type: number
      title: OrderItem
      type: object
    Order:
      example:
        order_date: 2000-01-23T04:56:07.000+00:00
        event_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        user_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        received_date: 2000-01-23T04:56:07.000+00:00
        shipped_date: 2000-01-23T04:56:07.000+00:00
        id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        items:
          - product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
            quantity: 5
            price: 2.302136
          - product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
            quantity: 5
            price: 2.302136
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
        order_date:
          format: date-time
          title: order_date
          type: string
        shipped_date:
          format: date-time
          title: shipped_date
          type: string
        received_date:
          format: date-time
          title: received_date
          type: string
        items:
          items:
            $ref: "#/components/schemas/OrderItem"
          title: items
          type: array
      required:
        - items
      title: Order
      type: object
    UpdateOrder:
      example:
        id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        shipped_date: "2000-01-23T04:56:07.000+00:00"
        received_date: "2000-01-23T04:56:07.000+00:00"
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
        shipped_date:
          format: date-time
          title: shipped_date
          type: string
        received_date:
          format: date-time
          title: received_date
          type: string
      title: UpdateOrder
      type: object
    AuditLog:
      example:
        id: 1
      properties:
        id:
          title: id
          type: integer
      title: AuditLog
      type: object
    Invite:
      properties:
        email:
          title: email
          $ref: '#/components/schemas/email'
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        event_name:
          title: event_name
          type: string
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
        data:
          title: data
          type: array
          items:
            type: object
      required:
        - event_id
      title: Invite
      type: object
    Cart:
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        attendee_id:
          title: attendee_id
          $ref: '#/components/schemas/uuid'
        product_id:
          title: product_id
          type: integer
        variation_id:
          title: variation_id
          type: integer
        category:
          title: category
          type: string
        quantity:
          title: quantity
          type: integer
      title: Cart
      type: object
    ProductItem:
      example:
        price: 6.0274563
        name: name
        id: 1
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
        is_active:
          title: is_active
          type: boolean
        name:
          title: name
          type: string
        sku:
          title: sku
          type: string
        weight_lb:
          title: weight_lb
          type: number
          format: float
        height_in:
          title: height_in
          type: number
          format: float
        width_in:
          title: width_in
          type: number
          format: float
        length_in:
          title: length_in
          type: number
          format: float
        value:
          title: value
          type: number
          format: float
        price:
          title: value
          type: number
          format: float
        on_hand:
          title: on_hand
          type: integer
        allocated:
          title: allocated
          type: integer
        reserve:
          title: reserve
          type: integer
        non_sellable_total:
          title: non_sellable_total
          type: integer
        reorder_level:
          title: reorder_level
          type: integer
        reorder_amount:
          title: reorder_amount
          type: integer
        replenishment_level:
          title: replenishment_level
          type: integer
        available:
          title: available
          type: integer
        backorder:
          title: backorder
          type: integer
        barcode:
          title: barcode
          type: number
          # format: float
        tags:
          title: tags
          type: array
          items:
            type: string
      required:
        - name
        - Value
        - Length
        - SKU
        - Barcode
        - Active
        - Weight
        - Height
        - Width
        - On_hand
        - Allocated
        - Reserve
        - Non_sellable_total
        - Reorder_amount
        - Replenishment_level
        - Available
        - Backorder
        - Tags
      title: ProductItem
      type: object
    DeleteProductItem:
      example:
        price: 6.0274563
        name: name
        id: 1
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
        is_active:
          title: is_active
          type: boolean
      required:
        - id
        - is_active
      title: DeleteProductItem
      type: object
