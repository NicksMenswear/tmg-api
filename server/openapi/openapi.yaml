openapi: 3.0.3
info:
  description:
    API for The Modern Groom, providing a platform to manage users, events,
    and orders for a modern event planning experience.
  title: The Modern Groom API
  version: 1.0.0
servers:
  - url: /
tags:
  - description:
      Operations related to user accounts, including registration, profile
      management, and user-specific queries.
    name: Users
  - description:
      All event-related actions such as creating, updating, listing, and
      managing event details.
    name: Events
  - description:
      Manages customer orders including order creation, retrieval, updating,
      and tracking.
    name: Orders
  - description:
      Handles product items, encompassing product listings, item details,
      and product management operations.
    name: Product
  - description:
      Provides access to audit logs, tracking changes made within the system
      for compliance and monitoring.
    name: Audit
paths:
  /:
    get:
      operationId: get_default
      responses:
        "200":
          description: Successful response
      summary: TMG API
      tags:
        - Default
      x-openapi-router-controller: server.controllers.default
  /audit:
    get:
      operationId: list_audit_entries
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AuditLog"
                type: array
          description: An array of audit log entries
      summary: Lists all audit entries
      tags:
        - Audit
      x-openapi-router-controller: server.controllers.audit

  /login:
    get:
      operationId: login_val
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Successful response
        "404":
          description: User not found
      summary: User Verfication
      tags:
        - Login
      x-openapi-router-controller: server.controllers.login

  /products:
    get:
      operationId: list_product_items
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductItem"
                type: array
          description: An array of product items
      summary: Lists all product items
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product
    post:
      operationId: create_product_item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
        required: true
        x-body-name: product_item
      responses:
        "201":
          description: Product item created
      summary: Create product item
      tags:
        - Product
      x-openapi-router-controller: server.controllers.product
  /events:
    post:
      operationId: create_event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
        x-body-name: event
      responses:
        "201":
          description: Event created
      summary: Create event
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
    put:
      operationId: update_event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
        required: true
        x-body-name: event
      responses:
        "201":
          description: Event Updated Success
      summary: Upadte event
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
  /events/{username}:
    get:
      operationId: list_events
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful response
      summary: Get event by email
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
  /delete_events:  
    put:
      operationId: soft_delete_event
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DeleteEvent'
        required: true
        x-body-name: event
      responses:
        "200":
          description: Event Deleted Success
      summary: Event Delete
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events

  /event_attendees:
    post:
      operationId: add_attendee
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Attendee'
        required: true
        x-body-name: attendee_data
      responses:
        "201":
          description: Attendee added
      summary: Attendee added
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
    put:
      operationId: update_attendee
      parameters:
      - explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/UpdateAttendee'
        required: true
        x-body-name: attendee_data
      responses:
        "201":
          description: Attendee Updated Success
      summary: Attendee Update
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
    get:
      operationId: list_attendee
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
        - in: query
          name: event_id
          schema:
            type: string
          required: true

          
      responses:
        "200":
          description: Attendee Get Success
      summary: Attendee List
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
  /event_attendees_by_eventid:
    get:
      operationId: get_attendees_by_eventid
      parameters:
      - description: Unique identifier of the event to retrieve attendees
        explode: true
        in: query
        name: event_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          description: Details of the specific event
        "404":
          description: Event not found
      summary: Retrieve a specific Event Attendees by Event ID
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
  /delete_event_attendee:  
    put:
      operationId: soft_delete_attendee
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DeleteAttendee'
        required: true
        x-body-name: attendee_data
      responses:
        "200":
          description: Attendee Deleted Success
      summary: Attendee Delete
      tags:
      - Attendees
      x-openapi-router-controller: server.controllers.attendees

  /orders:
    delete:
      operationId: delete_order
      parameters:
        - name: order_id
          in: query
          description: Unique identifier of the order to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found
      summary: Delete order by ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
    get:
      operationId: get_orders
      parameters:
        - description: Optional user ID to filter orders
          explode: true
          in: query
          name: user_id
          required: false
          schema:
            format: uuid
            type: string
          style: form
        - description: Optional event ID to filter orders
          explode: true
          in: query
          name: event_id
          required: false
          schema:
            format: uuid
            type: string
          style: form
      responses:
        "200":
          description: Retrieve all orders by user ID or event ID
      summary: Retrieve all orders, optionally filtered by user ID or event ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
    post:
      operationId: create_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
        x-body-name: order
      responses:
        "201":
          description: Order created
      summary: Create order
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
    put:
      operationId: update_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrder"
        required: true
        x-body-name: order
      responses:
        "200":
          description: Order updated successfully
        "404":
          description: Order not found
        "400":
          description: Bad Request. Invalid input or missing required fields in the request.
      summary: Update an existing order by ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
  /orders/{order_id}:
    get:
      operationId: get_order_by_id
      parameters:
        - description: Unique identifier of the order to retrieve
          explode: false
          in: path
          name: order_id
          required: true
          schema:
            format: uuid
            type: string
          style: simple
      responses:
        "200":
          description: Details of the specific order
        "404":
          description: Order not found
      summary: Retrieve a specific order by ID
      tags:
        - Orders
      x-openapi-router-controller: server.controllers.orders
  /users:
    get:
      operationId: list_users
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                type: array
          description: An array of users
      summary: Lists all users
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
    post:
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        x-body-name: user_data
      responses:
        "201":
          description: User created
      summary: Create user
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
    put:
      operationId: update_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        x-body-name: user_data
      responses:
        "200":
          description: User updated
        "404":
          description: User not found
      summary: Update a user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{email}:
    get:
      operationId: get_user_by_id
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: email
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Details of the user
        "404":
          description: User not found
      summary: Get a single user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users

  /shopify_customer:
    get:
      operationId: list_customer
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      summary: List Shopify customer
      tags:
        - Shopify
      x-openapi-router-controller: server.controllers.shopify


  /invite:
    post:
      operationId: send_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invite'
        required: true
        x-body-name: invite_data
      responses:
        "201":
          description: Invite created
      summary: Create Invite
      tags:
      - Invites
      x-openapi-router-controller: server.controllers.invites


  /looks:
    get:
      operationId: list_looks
      responses:
        "200":
          description: An array of looks
      summary: Lists all looks
      tags:
      - Looks
      x-openapi-router-controller: server.controllers.looks
    post:
      operationId: create_look
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Look'
        required: true
        x-body-name: look_data
      responses:
        "201":
          description: Look created
      summary: Create look
      tags:
      - Looks
      x-openapi-router-controller: server.controllers.looks
    put:
      operationId: update_look
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLook'
        required: true
        x-body-name: look_data
      responses:
        "200":
          description: Look updated
        "404":
          description: Look not found
      summary: Update a Look by name
      tags:
      - Looks
      x-openapi-router-controller: server.controllers.looks
  /looks_with_lookid_userid:
    get:
      operationId: get_look
      parameters:
      - description: Unique name of the look to retrieve
        explode: true
        in: query
        name: look_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: User ID of user having this look
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          description: Details of the Look
        "404":
          description: Look not found
      summary: Get a single look by name
      tags:
      - Looks
      x-openapi-router-controller: server.controllers.looks
  /looks_with_userid:
    get:
      operationId: get_user_looks
      parameters:
      - description: Retrieve look by user_id
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Key for validation
        explode: true
        in: query
        name: key
        required: false
        schema:
          format: str
          type: string
        style: form
      responses:
        "200":
          description: Details of the Look
        "404":
          description: Look not found
      summary: Get a single look by name
      tags:
      - Looks
      x-openapi-router-controller: server.controllers.looks

  /roles:
    get:
      operationId: list_roles
      responses:
        "200":
          description: An array of roles
      summary: Lists all roles
      tags:
      - Roles
      x-openapi-router-controller: server.controllers.roles
    post:
      operationId: create_role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
        x-body-name: role_data
      responses:
        "201":
          description: role created
      summary: Create role
      tags:
      - Roles
      x-openapi-router-controller: server.controllers.roles
    put:
      operationId: update_role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole'
        required: true
        x-body-name: role_data
      responses:
        "200":
          description: Role updated
        "404":
          description: Role not found
      summary: Update a Role by name
      tags:
      - Roles
      x-openapi-router-controller: server.controllers.roles
  /roles_with_roleid_eventid:
    get:
      operationId: get_role
      parameters:
      - description: Unique role_id to retrieve
        explode: true
        in: query
        name: role_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: Unique event_id for role to retrieve
        explode: true
        in: query
        name: event_id
        required: false
        schema:
          format: uuid
          type: string
        style: form
      responses:
        "200":
          description: Details of the Role
        "404":
          description: Role not found
      summary: Get a single role by name
      tags:
      - Roles
      x-openapi-router-controller: server.controllers.roles
  /roles_with_eventid:
    get:
      operationId: get_event_roles
      parameters:
      - description: Retrieve roles of event
        explode: true
        in: query
        name: event_id
        required: false
        schema:
          format: str
          type: string
        style: form
      responses:
        "200":
          description: Details of the Role
        "404":
          description: Role not found
      summary: Get a single role by name
      tags:
      - Roles
      x-openapi-router-controller: server.controllers.roles

  /carts:
    post:
      operationId: create_cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
        x-body-name: cart
      responses:
        "201":
          description: Cart created
      summary: Create cart
      tags:
      - Carts
      x-openapi-router-controller: server.controllers.carts
    put:
      operationId: update_cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
        x-body-name: cart
      responses:
        "201":
          description: Cart Updated Success
      summary: Upadte cart
      tags:
      - Carts
      x-openapi-router-controller: server.controllers.carts
  /cart_by_id:
    get:
      operationId: get_cart_by_id
      parameters:
      - description: Retrieve products of cart
        explode: true
        in: query
        name: cart_id
        required: false
        schema:
          format: str
          type: string
        style: form
      responses:
        "200":
          description: Details of the Cart
        "404":
          description: Cart not found
      summary: Get a single cart by id
      tags:
      - Carts
      x-openapi-router-controller: server.controllers.carts
  /cart_by_event_attendee:
    get:
      operationId: get_cart_by_event_attendee
      parameters:
      - description: Retrieve products of cart
        explode: true
        in: query
        name: event_id
        required: false
        schema:
          format: str
          type: string
        style: form
      - description: Retrieve products of cart
        explode: true
        in: query
        name: attendee_id
        required: false
        schema:
          format: str
          type: string
        style: form
      responses:
        "200":
          description: Details of the Cart
        "404":
          description: Cart not found
      summary: Get a single cart by id
      tags:
      - Carts
      x-openapi-router-controller: server.controllers.carts


components:
  schemas:
    User:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        email:
          title: email
          type: string
        shopify_id:
          title: shopify_id
          type: string
        account_status:
          title: account_status
          type: boolean
        role:
          title: role
          type: string
      required:
        - email
      title: User
      type: object
    Event:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        event_name:
          format: string
          title: event_name
          type: string
        event_date:
          format: date-time
          title: event_date
          type: string
        user_id:
          format: uuid
          readOnly: true
          title: user_id
          type: string
      required:
        - event_name
        - event_date
      title: Event
      type: object
    UpdateEvent:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        user_id:
          format: uuid
          readOnly: true
          title: user_id
          type: string
        event_date:
          format: date-time
          title: event_date
          type: string
      required:
        - user_id
        - event_date
      title: Event
      type: object
    DeleteEvent:
      properties:
        event_id:
          format: uuid
          title: event_id
          type: string
        user_id:
          format: uuid
          title: user_id
          type: string
        is_active:
          title: is_active
          type: boolean
      required:
        - event_id
        - user_id
      title: DeleteEvent
      type: object

    Attendee:
      properties:
        email:
          title: email
          type: string
        event_id:
          title: event_id
          type: string
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        role:
          title: role
          type: string
        style:
          title: style
          type: integer
        invite:
          title: invite
          type: integer
        pay:
          title: pay
          type: integer
        size:
          title: size
          type: integer
        ship:
          title: ship
          type: integer
        role:
          title: role
          type: integer
      required:
        - email
        - event_id
        - first_name
      title: Attendee
      type: object
    UpdateAttendee:
      properties:
        event_id:
          format: uuid
          title: event_id
          type: string
        email:
          format: string
          title: email
          type: string
        style:
          format: int64
          title: style
          type: integer
        invite:
          format: int64
          title: invite
          type: integer
        pay:
          format: int64
          title: pay
          type: integer
        size:
          format: int64
          title: size
          type: integer
        ship:
          format: int64
          title: ship
          type: integer
      required:
        - event_id
        - email
      title: UpdateAttendee
      type: object
    DeleteAttendee:
      properties:
        email:
          format: string
          title: email
          type: string
        event_id:
          format: uuid
          title: event_id
          type: string
        attendee_id:
          format: uuid
          title: attendee_id
          type: string
        is_active:
          title: is_active
          type: boolean
      required:
        - attendee_id
        - email
      title: DeleteAttendee
      type: object
    ListAttendee:
      properties:
        event_id:
          format: uuid
          title: event_id
          type: string
        email:
          format: string
          title: email
          type: string
      required:
        - event_id
        - email
      title: ListAttendee
      type: object

    OrderItem:
      example:
        product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        quantity: 5
        price: 2.302136
      properties:
        product_item_id:
          format: uuid
          title: product_item_id
          type: string
        quantity:
          format: int32
          title: quantity
          type: integer
        price:
          format: float
          title: price
          type: number
      title: OrderItem
      type: object
    Order:
      example:
        order_date: 2000-01-23T04:56:07.000+00:00
        event_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        user_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        received_date: 2000-01-23T04:56:07.000+00:00
        shipped_date: 2000-01-23T04:56:07.000+00:00
        id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        items:
          - product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
            quantity: 5
            price: 2.302136
          - product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
            quantity: 5
            price: 2.302136
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        user_id:
          format: uuid
          title: user_id
          type: string
        event_id:
          format: uuid
          title: event_id
          type: string
        order_date:
          format: date-time
          title: order_date
          type: string
        shipped_date:
          format: date-time
          title: shipped_date
          type: string
        received_date:
          format: date-time
          title: received_date
          type: string
        items:
          items:
            $ref: "#/components/schemas/OrderItem"
          title: items
          type: array
      required:
        - items
      title: Order
      type: object
    UpdateOrder:
      example:
        id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        shipped_date: "2000-01-23T04:56:07.000+00:00"
        received_date: "2000-01-23T04:56:07.000+00:00"
      properties:
        id:
          format: uuid
          title: id
          type: string
        shipped_date:
          format: date-time
          title: shipped_date
          type: string
        received_date:
          format: date-time
          title: received_date
          type: string
      title: UpdateOrder
      type: object
    ProductItem:
      example:
        price: 6.0274563
        name: name
        id: 1
      properties:
        id:
          format: int64
          readOnly: true
          title: id
          type: integer
        name:
          title: name
          type: string
        price:
          format: float
          title: price
          type: number
      required:
        - name
        - price
      title: ProductItem
      type: object
    AuditLog:
      example:
        id: 1
      properties:
        id:
          title: id
          type: integer
      title: AuditLog
      type: object
    Look:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        look_name:
          title: look_name
          type: string
        email:
          title: email
          type: string
        product_specs:
          title: product_specs
          type: object
        product_final_image:
          title: product_final_image
          type: string
      required:
        - look_name
        - email
      title: Look
      type: object
    UpdateLook:
      properties:
        look_name:
          title: look_name
          type: string
        user_id:
          title: user_id
          type: string
        flag:
          title: flag
          type: boolean
        product_specs:
          title: product_specs
          type: object
      required:
        - look_name
        - flag
      title: Look
      type: object
    Role:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        role_name:
          title: look_name
          type: string
        event_id:
          title: event_id
          type: string
        event_id:
          title: event_id
          type: string
      required:
        - role_name
      title: Role
      type: object
    UpdateRole:
      properties:
        role_name:
          title: role_name
          type: string
        new_role_name:
          title: new_role_name
          type: string
        event_id:
          title: event_id
          type: string
        look_id:
          title: look_id
          type: string
      required:
        - role_name
        - new_role_name
      title: Role
      type: object
    Invite:
      properties:
        email:
          title: email
          type: string
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        event_name:
          title: event_name
          type: string
        event_id:
          title: event_id
          type: string
        data:
          title: data
          type: array
          items:
            type: object
      required:
        - event_id
      title: Invite
      type: object
    Cart:
      properties:
        id:
          title: id
          type: string
        event_id:
          title: event_id
          type: string
        user_id:
          title: user_id
          type: string
        attendee_id:
          title: attendee_id
          type: string
        product_id:
          title: product_id
          type: integer
        variation_id:
          title: variation_id
          type: integer
        category:
          title: category
          type: string
        quantity:
          title: quantity
          type: integer
      title: Cart
      type: object
