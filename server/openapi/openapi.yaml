openapi: 3.0.3
info:
  description:
    API for The Modern Groom, providing a platform to manage users, events,
    and orders for a modern event planning experience.
  title: The Modern Groom API
  version: 1.0.0
servers:
  - url: /
tags:
  - description:
      Operations related to user accounts, including registration, profile
      management, and user-specific queries.
    name: Users
  - description:
      All event-related actions such as creating, updating, listing, and
      managing event details.
    name: Events
  - description:
      Manages customer orders including order creation, retrieval, updating,
      and tracking.
    name: Orders
  - description:
      Handles product items, encompassing product listings, item details,
      and product management operations.
    name: Product
  - description:
      Provides access to audit logs, tracking changes made within the system
      for compliance and monitoring.
    name: Audit
paths:
  /health:
    get:
      operationId: health
      responses:
        "200":
          description: Successful response
      summary: TMG Health Check
      tags:
        - Health
      x-openapi-router-controller: server.controllers.health
  /users:
    post:
      operationId: create_user
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        x-body-name: create_user
      responses:
        "201":
          description: User created
      summary: Create user
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{email}:
    get:
      operationId: get_user_by_email
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: email
          required: true
          schema:
            $ref: '#/components/schemas/email'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Details of the user
        "404":
          description: User not found
      summary: Get a single user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}:
    put:
      operationId: update_user
      parameters:
        - description: Unique ID of the user to update
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
        required: true
        x-body-name: update_user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Details of the user
        "404":
          description: User not found
      summary: Update single user by ID
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}/events:
    get:
      operationId: get_user_events
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - owner
              - attendee
        - in: query
          name: enriched
          schema:
            type: boolean
          required: false
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
          description: Collection of user events
      summary: Get collection of user events
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}/activation-url:
    get:
      operationId: generate_activation_url
      parameters:
        - description: Unique ID of the user to generate activation URL for
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "201":
          description: Activation URL generated
      summary: Generate activation URL for user
      tags:
        - Users
      x-openapi-router-controller: server.controllers.users
  /users/{user_id}/looks:
    get:
      operationId: get_user_looks
      parameters:
        - description: Gets list of looks for a user
          explode: false
          in: path
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Event"
                type: array
          description: Collection of looks that user has
      summary: Collection of looks that user has
      tags:
        - Users
        - Looks
      x-openapi-router-controller: server.controllers.users
  /ac/contact:
    post:
      operationId: sync_contact
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyncContact"
        required: true
        x-body-name: sync_contact
      responses:
        "201":
          description: Contact synced
      summary: Sync contact
      tags:
        - ActiveCampaign
      x-openapi-router-controller: server.controllers.activecampaign
  /ac/event:
    post:
      operationId: track_event
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  title: email
                  $ref: '#/components/schemas/email'
                event:
                  title: event
                  type: string
              required:
                - email
                - event
              title: TrackEvent
              type: object
        required: true
        x-body-name: track_event
      responses:
        "201":
          description: Event tracked
      summary: Track Event
      tags:
        - ActiveCampaign
      x-openapi-router-controller: server.controllers.activecampaign
  /events:
    post:
      operationId: create_event
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvent"
        required: true
        x-body-name: create_event
      responses:
        "201":
          description: Event created
      summary: Create event
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}:
    get:
      operationId: get_event_by_id
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: enriched
          schema:
            type: boolean
          required: false
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
          description: Details of the event
        "404":
          description: Event not found
      summary: Get a single event by ID
      tags:
        - Event
      x-openapi-router-controller: server.controllers.events
    put:
      operationId: update_event
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
        required: true
        x-body-name: update_event
      responses:
        "200":
          description: Event Updated Success
      summary: Update event
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
    delete:
      operationId: delete_event
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
        - name: X-Force-Delete
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Event Deleted Success
      summary: Event Delete
      tags:
        - Events
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}/roles:
    get:
      operationId: get_event_roles
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: enriched
          schema:
            type: boolean
          required: false
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Role"
                type: array
          description: Collection of roles for event
        "404":
          description: Event not found
      summary: Get a single event by ID
      tags:
        - Event
        - Role
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}/attendees:
    get:
      operationId: get_event_attendees
      parameters:
        - description: ID of the event
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Attendee"
                type: array
          description: Collection of attendees for event
        "404":
          description: Event not found
      summary: Get a collection of attendees by event id
      tags:
        - Event
        - Attendee
      x-openapi-router-controller: server.controllers.events
  /events/{event_id}/discounts:
    get:
      operationId: get_owner_discounts_for_event
      parameters:
        - description: ID of the event
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventDiscount"
                type: array
          description: Collection of discounts for event
      summary: Get a collection of discounts by event id
      x-openapi-router-controller: server.controllers.discounts
    post:
      operationId: create_discount_intents
      parameters:
        - description: ID of the event
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/CreateDiscountIntent"
              type: array
        required: true
        x-body-name: intents
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventDiscount"
                type: array
          description: An array of discounts created
      summary: Create discount intents
      x-openapi-router-controller: server.controllers.discounts

  /looks:
    post:
      operationId: create_look
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLook'
        required: true
        x-body-name: create_look
      responses:
        "201":
          description: Look created
      summary: Create look
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
  /looks/{look_id}:
    get:
      operationId: get_look_by_id
      parameters:
        - explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Single look by id
      summary: Get single look by id
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
    put:
      operationId: update_look
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLook'
        required: true
        x-body-name: update_look
      responses:
        "200":
          description: Look updated
        "404":
          description: Look not found
      summary: Update a Look by name
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
    delete:
      operationId: delete_look
      parameters:
        - description: Unique ID of the look to delete
          explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "204":
          description: Look Deleted Successfully
      summary: Delete look
      tags:
        - Looks
      x-openapi-router-controller: server.controllers.looks
  /looks/{look_id}/events:
    get:
      operationId: get_events_for_look
      parameters:
        - explode: false
          in: path
          name: look_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Collection of events for look by id
      summary: Gets collection for look by id
      tags:
        - Looks
        - Events
      x-openapi-router-controller: server.controllers.looks

  /roles:
    post:
      operationId: create_role
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
        x-body-name: create_role
      responses:
        "201":
          description: role created
      summary: Create role
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles
  /roles/{role_id}:
    get:
      operationId: get_role_by_id
      parameters:
        - explode: false
          in: path
          name: role_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Single role by id
      summary: Get single role by id
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles
    put:
      operationId: update_role
      parameters:
        - description: Unique ID of the event to retrieve
          explode: false
          in: path
          name: role_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole'
        required: true
        x-body-name: update_role
      responses:
        "200":
          description: Role updated
        "404":
          description: Role not found
        "409":
          description: Duplicate role name
      summary: Update a Role by name
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles
    delete:
      operationId: delete_role
      parameters:
        - description: Id of the role to delete
          explode: false
          in: path
          name: role_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "204":
          description: Role deleted successfully
      summary: Delete role
      tags:
        - Roles
      x-openapi-router-controller: server.controllers.roles

  /attendees:
    post:
      operationId: create_attendee
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAttendee'
        required: true
        x-body-name: create_attendee
      responses:
        "201":
          description: Attendee created
      summary: Create attendee
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
  /attendees/{attendee_id}:
    get:
      operationId: get_attendee_by_id
      parameters:
        - explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Single attendee by id
      summary: Get single attendee by id
      tags:
        - Attendee
      x-openapi-router-controller: server.controllers.attendees
    put:
      operationId: update_attendee
      parameters:
        - description: Unique ID of the attendee
          explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttendee'
        required: true
        x-body-name: update_attendee
      responses:
        "200":
          description: Attendee updated
        "404":
          description: Attendee not found
      summary: Update a Attendee by name
      tags:
        - Attendee
      x-openapi-router-controller: server.controllers.attendees
    delete:
      operationId: delete_attendee
      parameters:
        - description: Unique ID of the attendee to delete
          explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
        - name: X-Force-Delete
          in: header
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Attendee Deleted Successfully
      summary: Attendee Delete
      tags:
        - Attendees
      x-openapi-router-controller: server.controllers.attendees
  /attendees/{attendee_id}/apply-discounts:
    post:
      operationId: apply_discounts
      parameters:
        - explode: false
          in: path
          name: attendee_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
          style: simple
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyDiscounts"
        required: true
        x-body-name: apply_discounts_request
      responses:
        "200":
          description: Discounts applied
      summary: Apply discounts
      x-openapi-router-controller: server.controllers.attendees
  /invites:
    post:
      operationId: send_invites
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/uuid'
              type: array
        required: true
        x-body-name: attendee_ids
      responses:
        "201":
          description: Invites sent
      summary: Send invites
      tags:
        - Invites
      x-openapi-router-controller: server.controllers.attendees
  /webhooks/shopify:
    post:
      operationId: shopify_webhook
      parameters:
        - name: X-Shopify-Topic
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShopifyWebhook"
        required: true
        x-body-name: payload
      responses:
        "200":
          description: Webhook received
      summary: Shopify Webhook
      tags:
        - Webhooks
      x-openapi-router-controller: server.controllers.webhooks

  /shipping/price:
    post:
      operationId: calculate_shipping_price
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
        x-body-name: payload
      responses:
        "200":
          description: Shipping
      summary: Shipping
      tags:
        - Shipping
      x-openapi-router-controller: server.controllers.shipping

  /audit:
    get:
      operationId: list_audit_entries
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AuditLog"
                type: array
          description: An array of audit log entries
      summary: Lists all audit entries
      tags:
        - Audit
      x-openapi-router-controller: server.controllers.audit
  /login:
    get:
      operationId: login
      parameters:
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
        - in: query
          name: email
          schema:
            $ref: '#/components/schemas/email'
          required: true
      responses:
        "200":
          description: Successful response
        "404":
          description: User not found
      summary: User Login
      tags:
        - Login
      x-openapi-router-controller: server.controllers.auth
  /sizes:
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSize"
        required: true
        x-body-name: data
      responses:
        "201":
          description: Save user size
      summary: Save user size
      tags:
        - Sizing
      x-openapi-router-controller: server.controllers.sizes
    get:
      operationId: get_latest_size
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - in: query
          name: logged_in_customer_id
          schema:
            type: string
          required: false
        - in: query
          name: shop
          schema:
            type: string
          required: false
        - in: query
          name: path_prefix
          schema:
            type: string
          required: false
        - in: query
          name: timestamp
          schema:
            type: string
          required: false
        - in: query
          name: signature
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Latest user size
      summary: Get latest user size
      tags:
        - Sizing
      x-openapi-router-controller: server.controllers.sizes
  /measurements:
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMeasurement"
        required: true
        x-body-name: data
      responses:
        "201":
          description: Save user measurements
      summary: Save user measurements
      tags:
        - Measurements
      x-openapi-router-controller: server.controllers.measurements

  /jobs/hello-world:
    post:
      operationId: hello_world
      responses:
        "200":
          description: Hello World
      summary: Hello World
      x-openapi-router-controller: server.controllers.jobs
      tags:
        - Jobs

components:
  schemas:
    uuid:
      type: string
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      minLength: 36
      maxLength: 36
    email:
      type: string
      pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    User:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        first_name:
          title: first_name
          type: string
          nullable: true
        last_name:
          title: last_name
          type: string
          nullable: true
        email:
          title: email
          $ref: '#/components/schemas/email'
        shopify_id:
          title: shopify_id
          type: string
          nullable: true
        account_status:
          title: account_status
          type: boolean
      required:
        - email
      title: User
      type: object
    UpdateUser:
      properties:
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        email:
          title: email
          $ref: '#/components/schemas/email'
        shopify_id:
          title: shopify_id
          type: string
          nullable: true
        account_status:
          title: account_status
          type: boolean
      title: UpdateUser
      type: object
    CreateEvent:
      properties:
        name:
          type: string
          title: name
        event_at:
          type: string
          title: event_at
          format: date-time
        type:
          type: string
          title: type
          enum:
            - wedding
            - prom
            - other
          default: wedding
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
      required:
        - user_id
        - name
        - event_at
      title: CreateEvent
      type: object
    Event:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        name:
          format: string
          title: name
          type: string
        event_at:
          format: date-time
          title: event_at
          type: string
        owner:
          title: owner
          $ref: '#/components/schemas/User'
      required:
        - owner
        - name
        - event_at
      title: Event
      type: object
    UpdateEvent:
      properties:
        name:
          format: string
          title: name
          type: string
        event_at:
          format: date-time
          title: event_at
          type: string
      required:
        - name
        - event_at
      title: Event
      type: object
    CreateLook:
      properties:
        name:
          title: name
          type: string
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        product_specs:
          title: product_specs
          type: object
        image:
          title: image
          type: string
          nullable: true
      required:
        - name
        - user_id
      title: Create Look
      type: object
    Look:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        name:
          title: name
          type: string
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        product_specs:
          title: product_specs
          type: object
        image_path:
          title: image_path
          type: string
      title: Look
      type: object
    UpdateLook:
      properties:
        name:
          title: name
          type: string
        product_specs:
          title: product_specs
          type: object
      required:
        - name
      title: Look
      type: object
    Role:
      properties:
        id:
          readOnly: true
          title: id
          $ref: '#/components/schemas/uuid'
        name:
          title: name
          type: string
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
      required:
        - name
      title: Role
      type: object
    UpdateRole:
      properties:
        name:
          title: name
          type: string
      required:
        - name
      title: Role
      type: object
    CreateAttendee:
      properties:
        email:
          title: email
          $ref: '#/components/schemas/email'
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        role_id:
          title: role
          type: string
          nullable: true
        look_id:
          title: look_id
          $ref: '#/components/schemas/uuid'
          nullable: true
      required:
        - event_id
        - email
        - first_name
        - last_name
      title: CreateAttendee
      type: object
    UpdateAttendee:
      properties:
        role_id:
          title: role
          $ref: '#/components/schemas/uuid'
          nullable: true
        look_id:
          title: look_id
          $ref: '#/components/schemas/uuid'
          nullable: true
      title: UpdateAttendee
      type: object
    Attendee:
      properties:
        email:
          title: email
          $ref: '#/components/schemas/email'
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        style:
          title: style
          type: boolean
          default: false
        invite:
          title: invite
          type: boolean
          default: false
        pay:
          title: pay
          type: boolean
          default: false
        size:
          title: size
          type: boolean
          default: false
        ship:
          title: ship
          type: boolean
          default: false
        role_id:
          title: role
          type: string
          nullable: true
        look_id:
          title: look_id
          $ref: '#/components/schemas/uuid'
          nullable: true
      required:
        - event_id
        - email
        - first_name
        - last_name
      title: Attendee
      type: object
    CreateDiscountIntent:
      properties:
        attendee_id:
          title: attendee_id
          $ref: '#/components/schemas/uuid'
          type: string
        amount:
          format: float
          title: amount
          type: number
          default: 0.0
        pay_full:
          title: pay_full
          type: boolean
          default: false
      required:
        - attendee_id
    EventDiscountCode:
      properties:
        code:
          title: code
          type: string
        amount:
          title: amount
          type: number
          format: float
        type:
          title: type
          type: string
        used:
          title: used
          type: boolean
    EventDiscountAttendeeLook:
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
          type: string
        name:
          title: name
          type: string
        price:
          title: price
          type: number
          format: float
    EventDiscountAttendee:
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
          type: string
        user_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
          type: string
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        look:
          title: look
          $ref: '#/components/schemas/EventDiscountAttendeeLook'
          type: object
          nullable: true
    EventDiscount:
      properties:
        id:
          title: id
          $ref: '#/components/schemas/uuid'
          type: string
          nullable: true
        event_id:
          title: event_id
          $ref: '#/components/schemas/uuid'
          type: string
        attendee:
          title: attendee_id
          $ref: '#/components/schemas/EventDiscountAttendee'
        amount:
          format: float
          title: amount
          type: number
        codes:
          title: codes
          type: array
          items:
            $ref: '#/components/schemas/EventDiscountCode'
          default: []
    ApplyDiscounts:
      properties:
        shopify_cart_id:
          title: shopify_cart_id
          type: string
      required:
        - shopify_cart_id

    ShopifyWebhook:
        title: ShopifyWebhook
        type: object

    AuditLog:
      example:
        id: 1
      properties:
        id:
          title: id
          type: integer
      title: AuditLog
      type: object
    
    CreateSize:
      properties:
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        measurement_id:
          title: measurement_id
          $ref: '#/components/schemas/uuid'
        data:
          title: data
          type: array
      required:
        - user_id
        - measurement_id
        - data
      title: Size
      type: object

    CreateMeasurement:
      properties:
        user_id:
          title: user_id
          $ref: '#/components/schemas/uuid'
        data:
          title: data
          type: object
      required:
        - user_id
        - data
      title: Measurement
      type: object

    SyncContact:
      properties:
        email:
          title: email
          $ref: '#/components/schemas/email'
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        phone:
          title: phone
          type: string
        fields:
          title: fields
          type: object
        events:
          title: events
          type: array
          items:
            type: string
      required:
        - email
      title: SyncContact
      type: object