# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
from models.order_item import OrderItem
import util

from models.order_item import OrderItem  # noqa: E501

class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, user_id=None, event_id=None, order_date=None, shipped_date=None, received_date=None):  # noqa: E501
        """Order - a model defined in OpenAPI

        :param id: The id of this Order.  # noqa: E501
        :type id: int
        :param user_id: The user_id of this Order.  # noqa: E501
        :type user_id: int
        :param event_id: The event_id of this Order.  # noqa: E501
        :type event_id: int
        :param order_date: The order_date of this Order.  # noqa: E501
        :type order_date: datetime
        :param shipped_date: The shipped_date of this Order.  # noqa: E501
        :type shipped_date: datetime
        :param received_date: The received_date of this Order.  # noqa: E501
        :type received_date: datetime
        :param items: The items of this Order.  # noqa: E501
        :type items: List[OrderItem]
        """
        self.openapi_types = {
            'id': int,
            'user_id': int,
            'event_id': int,
            'order_date': datetime,
            'shipped_date': datetime,
            'received_date': datetime
            # 'items': List[OrderItem]
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'event_id': 'event_id',
            'order_date': 'order_date',
            'shipped_date': 'shipped_date',
            'received_date': 'received_date'
            # 'items': 'items'
        }

        self._id = id
        self._user_id = user_id
        self._event_id = event_id
        self._order_date = order_date
        self._shipped_date = shipped_date
        self._received_date = received_date
        # self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)
    

    @property
    def to_dict(self):
        """Convert the model instance to a dictionary."""
        result = self.openapi_types.copy()
        result['id'] = self.id
        result['user_id'] = self.user_id
        result['event_id'] = self.event_id
        result['order_date'] = self.order_date
        result['shipped_date'] = self.shipped_date
        result['received_date'] = self.received_date
        return result
    
    @to_dict.setter
    def to_dict(self, values):
        """Set attributes based on a dictionary."""
        if 'id' in values:
            self.id = values['id']
        if 'user_id' in values:
            self.user_id = values['user_id']
        if 'event_id' in values:
            self.event_id = values['event_id']
        if 'order_date' in values:
            self.order_date = values['order_date']
        if 'shipped_date' in values:
            self.shipped_date = values['shipped_date']
        if 'received_date' in values:
            self.received_date = values['received_date']

    @property
    def id(self):
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Order.


        :return: The user_id of this Order.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Order.


        :param user_id: The user_id of this Order.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def event_id(self):
        """Gets the event_id of this Order.


        :return: The event_id of this Order.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Order.


        :param event_id: The event_id of this Order.
        :type event_id: int
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def order_date(self):
        """Gets the order_date of this Order.


        :return: The order_date of this Order.
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Order.


        :param order_date: The order_date of this Order.
        :type order_date: datetime
        """
        if order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")  # noqa: E501

        self._order_date = order_date

    @property
    def shipped_date(self):
        """Gets the shipped_date of this Order.


        :return: The shipped_date of this Order.
        :rtype: datetime
        """
        return self._shipped_date

    @shipped_date.setter
    def shipped_date(self, shipped_date):
        """Sets the shipped_date of this Order.


        :param shipped_date: The shipped_date of this Order.
        :type shipped_date: datetime
        """

        self._shipped_date = shipped_date

    @property
    def received_date(self):
        """Gets the received_date of this Order.


        :return: The received_date of this Order.
        :rtype: datetime
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date):
        """Sets the received_date of this Order.


        :param received_date: The received_date of this Order.
        :type received_date: datetime
        """

        self._received_date = received_date

    # @property
    # def items(self):
    #     """Gets the items of this Order.


    #     :return: The items of this Order.
    #     :rtype: List[OrderItem]
    #     """
    #     return self._items

    # @items.setter
    # def items(self, items):
    #     """Sets the items of this Order.


    #     :param items: The items of this Order.
    #     :type items: List[OrderItem]
    #     """
    #     if items is None:
    #         raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

    #     self._items = items
