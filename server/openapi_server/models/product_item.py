# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class ProductItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, price=None):  # noqa: E501
        """ProductItem - a model defined in OpenAPI

        :param id: The id of this ProductItem.  # noqa: E501
        :type id: int
        :param name: The name of this ProductItem.  # noqa: E501
        :type name: str
        :param description: The description of this ProductItem.  # noqa: E501
        :type description: str
        :param price: The price of this ProductItem.  # noqa: E501
        :type price: float
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            # 'description': str,
            'price': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            # 'description': 'description',
            'price': 'price'
        }

        self._id = id
        self._name = name
        # self._description = description
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'ProductItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductItem of this ProductItem.  # noqa: E501
        :rtype: ProductItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProductItem.


        :return: The id of this ProductItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductItem.


        :param id: The id of this ProductItem.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductItem.


        :return: The name of this ProductItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductItem.


        :param name: The name of this ProductItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    # @property
    # def description(self):
    #     """Gets the description of this ProductItem.


    #     :return: The description of this ProductItem.
    #     :rtype: str
    #     """
    #     return self._description

    # @description.setter
    # def description(self, description):
    #     """Sets the description of this ProductItem.


    #     :param description: The description of this ProductItem.
    #     :type description: str
    #     """

    #     self._description = description

    @property
    def price(self):
        """Gets the price of this ProductItem.


        :return: The price of this ProductItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductItem.


        :param price: The price of this ProductItem.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price
