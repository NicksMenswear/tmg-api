openapi: 3.0.3
info:
  description:
    API for The Modern Groom, providing a platform to manage users, events,
    and orders for a modern event planning experience.
  title: The Modern Groom API
  version: 1.0.0
servers:
  - url: /
tags:
  - description:
      Operations related to user accounts, including registration, profile
      management, and user-specific queries.
    name: Users
  - description:
      All event-related actions such as creating, updating, listing, and
      managing event details.
    name: Events
  - description:
      Manages customer orders including order creation, retrieval, updating,
      and tracking.
    name: Orders
  - description:
      Handles product items, encompassing product listings, item details,
      and product management operations.
    name: Product
  - description:
      Provides access to audit logs, tracking changes made within the system
      for compliance and monitoring.
    name: Audit
paths:
  /:
    get:
      operationId: get_default
      responses:
        "200":
          description: Successful response
      summary: TMG API
      tags:
        - Default
      x-openapi-router-controller: controllers.default
  /audit:
    get:
      operationId: list_audit_entries
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AuditLog"
                type: array
          description: An array of audit log entries
      summary: Lists all audit entries
      tags:
        - Audit
      x-openapi-router-controller: controllers.audit
  /products:
    get:
      operationId: list_product_items
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductItem"
                type: array
          description: An array of product items
      summary: Lists all product items
      tags:
        - Product
      x-openapi-router-controller: controllers.product
    post:
      operationId: create_product_item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
        required: true
        x-body-name: product_item
      responses:
        "201":
          description: Product item created
      summary: Create product item
      tags:
        - Product
      x-openapi-router-controller: controllers.product
  /events:
    post:
      operationId: create_event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
        x-body-name: event
      responses:
        "201":
          description: Event created
      summary: Create event
      tags:
        - Events
      x-openapi-router-controller: controllers.events
    put:
      operationId: update_event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvent"
        required: true
        x-body-name: event
      responses:
        "201":
          description: Event Updated Success
      summary: Upadte event
      tags:
        - Events
      x-openapi-router-controller: controllers.events
  /events/{username}:
    get:
      operationId: list_events
      parameters:
        - explode: false
          in: path
          name: username
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Successful response
      summary: Get event by email
      tags:
        - Events
      x-openapi-router-controller: controllers.events
  /event_attendees:
    post:
      operationId: add_attendee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attendee"
        required: true
        x-body-name: attendee_data
      responses:
        "201":
          description: Attendee added
      summary: Attendee added
      tags:
        - Attendees
      x-openapi-router-controller: controllers.attendees
    put:
      operationId: update_attendee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAttendee"
        required: true
        x-body-name: attendee_data
      responses:
        "201":
          description: Attendee Updated Success
      summary: Attendee Update
      tags:
        - Attendees
      x-openapi-router-controller: controllers.attendees
    get:
      operationId: list_attendee
      responses:
        "201":
          description: Attendee Get Success
      summary: Attendee event
      tags:
        - Attendee
      x-openapi-router-controller: controllers.attendees
  /event_attendees/{event_id}:
    get:
      operationId: get_attendees_by_eventid
      parameters:
        - description: Unique identifier of the event to retrieve attendees
          explode: false
          in: path
          name: event_id
          required: true
          schema:
            format: uuid
            type: string
          style: simple
      responses:
        "200":
          description: Details of the specific event
        "404":
          description: Event not found
      summary: Retrieve a specific Event Attendees by Event ID
      tags:
        - Attendee
      x-openapi-router-controller: controllers.attendees

  /orders:
    delete:
      operationId: delete_order
      parameters:
        - name: order_id
          in: query
          description: Unique identifier of the order to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found
      summary: Delete order by ID
      tags:
        - Orders
      x-openapi-router-controller: controllers.orders
    get:
      operationId: get_orders
      parameters:
        - description: Optional user ID to filter orders
          explode: true
          in: query
          name: user_id
          required: false
          schema:
            format: uuid
            type: string
          style: form
        - description: Optional event ID to filter orders
          explode: true
          in: query
          name: event_id
          required: false
          schema:
            format: uuid
            type: string
          style: form
      responses:
        "200":
          description: Retrieve all orders by user ID or event ID
      summary: Retrieve all orders, optionally filtered by user ID or event ID
      tags:
        - Orders
      x-openapi-router-controller: controllers.orders
    post:
      operationId: create_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
        x-body-name: order
      responses:
        "201":
          description: Order created
      summary: Create order
      tags:
        - Orders
      x-openapi-router-controller: controllers.orders
    put:
      operationId: update_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrder"
        required: true
        x-body-name: order
      responses:
        "200":
          description: Order updated successfully
        "404":
          description: Order not found
        "400":
          description: Bad Request. Invalid input or missing required fields in the request.
      summary: Update an existing order by ID
      tags:
        - Orders
      x-openapi-router-controller: controllers.orders
  /orders/{order_id}:
    get:
      operationId: get_order_by_id
      parameters:
        - description: Unique identifier of the order to retrieve
          explode: false
          in: path
          name: order_id
          required: true
          schema:
            format: uuid
            type: string
          style: simple
      responses:
        "200":
          description: Details of the specific order
        "404":
          description: Order not found
      summary: Retrieve a specific order by ID
      tags:
        - Orders
      x-openapi-router-controller: controllers.orders
  /users:
    get:
      operationId: list_users
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                type: array
          description: An array of users
      summary: Lists all users
      tags:
        - Users
      x-openapi-router-controller: controllers.users
    post:
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        x-body-name: user_data
      responses:
        "201":
          description: User created
      summary: Create user
      tags:
        - Users
      x-openapi-router-controller: controllers.users
    put:
      operationId: update_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
        x-body-name: user_data
      responses:
        "200":
          description: User updated
        "404":
          description: User not found
      summary: Update a user by ID
      tags:
        - Users
      x-openapi-router-controller: controllers.users
    # delete:
    #   operationId: delete_user
    #   parameters:
    #   - name: email
    #     in: query
    #     description: Unique identifier of the user to delete
    #     required: true
    #     schema:
    #       type: string
    #       format: email
    #   responses:
    #     "204":
    #       description: User deleted successfully
    #     "404":
    #       description: User not found
    #   summary: Delete order by ID
    #   tags:
    #   - Users
    #   - Users Delete
    #   x-openapi-router-controller: controllers.users
  /users/{email}:
    get:
      operationId: get_user_by_id
      parameters:
        - description: Unique ID of the user to retrieve
          explode: false
          in: path
          name: email
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Details of the user
        "404":
          description: User not found
      summary: Get a single user by ID
      tags:
        - Users
      x-openapi-router-controller: controllers.users
    # /virtualcart/query:
    #   # get by cart id, user id, or atendee id, event id
    # /virtualcart/{virtualcart_id}:
    #   get:
    #     operationId: get_virtualcart_by_id
    #     parameters:
    #     - description: Unique ID of the virtualcart to retrieve
    #       explode: false
    #       in: path
    #       name: virtualcart_id
    #       required: true
    #       schema:
    #         type: string
    #       style: simple
    #     responses:
    #       "200":
    #         content:
    #           application/json:
    #             schema:
    #               $ref: '#/components/schemas/VirtualCart'
    #         description: Details of the virtualcart
    #       "404":
    #         description: VirtualCart not found
    #     summary: Get a single virtualcart by ID
    #     tags:
    #     - VirtualCart
    #     x-openapi-router-controller: controllers.virtualcart
    # /virutalcart:
    #   post:
    #     operationId: create_cart
    #     requestBody:
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Cart'
    #       required: true
    #       x-body-name: cart
    #     responses:
    #       "201":
    #         description: Cart created
    #     summary: Create cart
    #     tags:
    #     - Cart
    #     x-openapi-router-controller: controllers.cart
    #   put:
    #     operationId: update_cart
    #     requestBody:
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Cart'
    #       required: true
    #       x-body-name: cart
    #     responses:
    #       "200":
    #         description: Cart updated
    #       "404":
    #         description: Cart not found
    #     summary: Update a cart by ID
    #     tags:
    #     - Cart
    #     x-openapi-router-controller: controllers.cart
  /shiphero:  # add example payload
    post:
      operationId: shiphero_tracking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shiphero'
        required: true
        x-body-name: shipping
      responses:
        "201":
          description: Shipping saved
      summary: Save tracking information
      tags:
      - Shipping
      x-openapi-router-controller: controllers.shipping
components:
  schemas:
    User:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        email:
          title: email
          type: string
        shopify_id:
          title: shopify_id
          type: string
        temp:
          title: temp
          type: string
        role:
          title: role
          type: string
      required:
        - email
      title: User
      type: object
    Event:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        event_name:
          format: string
          title: event_name
          type: string
        event_date:
          format: date-time
          title: event_date
          type: string
        user_id:
          format: uuid
          readOnly: true
          title: user_id
          type: string
      required:
        - event_name
        - event_date
      title: Event
      type: object
    UpdateEvent:
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        user_id:
          format: uuid
          readOnly: true
          title: user_id
          type: string
        event_date:
          format: date-time
          title: event_date
          type: string
      required:
        - user_id
        - event_date
      title: Event
      type: object

    Attendee:
      properties:
        email:
          title: email
          type: string
        event_id:
          title: event_id
          type: string
        first_name:
          title: first_name
          type: string
        last_name:
          title: last_name
          type: string
        style:
          title: style
          type: integer
        invite:
          title: invite
          type: integer
        pay:
          title: pay
          type: integer
        size:
          title: size
          type: integer
        ship:
          title: ship
          type: integer
      required:
        - email
        - event_id
        - first_name
      title: Attendee
      type: object
    UpdateAttendee:
      properties:
        event_id:
          format: uuid
          title: event_id
          type: string
        email:
          format: string
          title: email
          type: string
        style:
          format: int64
          title: style
          type: integer
        invite:
          format: int64
          title: invite
          type: integer
        pay:
          format: int64
          title: pay
          type: integer
        size:
          format: int64
          title: size
          type: integer
        ship:
          format: int64
          title: ship
          type: integer
      required:
        - event_id
        - email
      title: UpdateAttendee
      type: object

    ListAttendee:
      properties:
        event_id:
          format: uuid
          title: event_id
          type: string
        email:
          format: string
          title: email
          type: string
      required:
        - event_id
        - email
      title: ListAttendee
      type: object

    OrderItem:
      example:
        product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        quantity: 5
        price: 2.302136
      properties:
        product_item_id:
          format: uuid
          title: product_item_id
          type: string
        quantity:
          format: int32
          title: quantity
          type: integer
        price:
          format: float
          title: price
          type: number
      title: OrderItem
      type: object
    Order:
      example:
        order_date: 2000-01-23T04:56:07.000+00:00
        event_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        user_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        received_date: 2000-01-23T04:56:07.000+00:00
        shipped_date: 2000-01-23T04:56:07.000+00:00
        id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        items:
          - product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
            quantity: 5
            price: 2.302136
          - product_item_id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
            quantity: 5
            price: 2.302136
      properties:
        id:
          format: uuid
          readOnly: true
          title: id
          type: string
        user_id:
          format: uuid
          title: user_id
          type: string
        event_id:
          format: uuid
          title: event_id
          type: string
        order_date:
          format: date-time
          title: order_date
          type: string
        shipped_date:
          format: date-time
          title: shipped_date
          type: string
        received_date:
          format: date-time
          title: received_date
          type: string
        items:
          items:
            $ref: "#/components/schemas/OrderItem"
          title: items
          type: array
      required:
        - items
      title: Order
      type: object
    UpdateOrder:
      example:
        id: 19C9A3EE-4791-463A-80EB-BF9FC1057FA4
        shipped_date: "2000-01-23T04:56:07.000+00:00"
        received_date: "2000-01-23T04:56:07.000+00:00"
      properties:
        id:
          format: uuid
          title: id
          type: string
        shipped_date:
          format: date-time
          title: shipped_date
          type: string
        received_date:
          format: date-time
          title: received_date
          type: string
      title: UpdateOrder
      type: object
    ProductItem:
      example:
        price: 6.0274563
        name: name
        id: 1
      properties:
        id:
          format: int64
          readOnly: true
          title: id
          type: integer
        name:
          title: name
          type: string
        price:
          format: float
          title: price
          type: number
      required:
        - name
        - price
      title: ProductItem
      type: object
    AuditLog:
      example:
        id: 1
      properties:
        id:
          title: id
          type: integer
      title: AuditLog
      type: object
    Shiphero:
      example:
        tracking_number: "tracking_number"
      properties:
        tracking_number:
          title: tracking_number
          type: string
      title: Shiphero
      type: object
