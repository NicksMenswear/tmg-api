service: tmg-api
provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, "dev"}
  region: ${self:custom.stageVars.${sls:stage}.region}
  iam:
    role:
      name: tmg-api-${sls:stage}-role
      statements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:AbortMultipartUpload
          - s3:ListMultipartUploadParts
          - s3:CreateMultipartUpload
          - s3:CompleteMultipartUpload
        Resource:
          - arn:aws:s3:::tmg-api-*/*
  stackTags:
      env: ${sls:stage}
  logs:
    restApi:
      accessLogging: true
      format: '$context.requestTime "$context.httpMethod $context.path $context.protocol" $context.status $context.identity.sourceIp $context.requestId'

functions:
  api:
    handler: main.lambda_handler
    events:
      - http: ANY /
      - http: ANY /{proxy+}
    provisionedConcurrency: 15
    reservedConcurrency: 100
    timeout: 10
    memorySize: 512
    lambdaInsights: true
    vpc: ${self:custom.stageVars.${sls:stage}.vpc}
    environment:
      # General
      STAGE: ${sls:stage}
      API_TOKEN: ${ssm:/${sls:stage}/tmg-api/API_TOKEN}
      DATA_BUCKET: ${self:custom.stageVars.${sls:stage}.data_bucket}
      # SQLAlchemy Env Variables
      DB_HOST: ${ssm:/${sls:stage}/db/DB_HOST}
      DB_PORT: 5432
      DB_NAME: ${ssm:/${sls:stage}/db/DB_NAME}
      DB_USER: ${ssm:/${sls:stage}/db/DB_USER}
      DB_PASSWORD: ${ssm:/${sls:stage}/db/DB_PASSWORD}
      # Shopify Env Variables
      API_KEY: ${ssm:/${sls:stage}/shopify/API_KEY}
      api_version: "2024-01"
      shopify_store: ${ssm:/${sls:stage}/shopify/shopify_store}
      client_id: ${ssm:/${sls:stage}/shopify/client_id}
      client_secret: ${ssm:/${sls:stage}/shopify/client_secret}
      webhook_signature_key: ${ssm:/${sls:stage}/shopify/webhook_signature_key}
      admin_api_access_token: ${ssm:/${sls:stage}/shopify/admin_api_access_token}
      storefront_api_access_token: ${ssm:/${sls:stage}/shopify/storefront_api_access_token}
      # Postmark Env Variables
      POSTMARK_API_URL: "https://api.postmarkapp.com"
      POSTMARK_API_KEY: ${ssm:/${sls:stage}/postmark/api_key}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-plugin-datadog
  - serverless-plugin-resource-tagging
  - serverless-plugin-lambda-insights

custom:
  stageVars:
    dev:
      region: us-west-2
      data_bucket: "arn:aws:s3:::tmg-api-data-dev-fe58ee1e1337"
      vpc:
        securityGroupIds:
          - sg-0649f5114f8fdde15
        subnetIds:
          - subnet-0558d5c84f76f6246
          - subnet-081fa5d80ecd9a253
      forwarderArn: arn:aws:lambda:us-west-2:828867313984:function:DatadogIntegration-ForwarderStack-AS2SOT-Forwarder-GHUaejGvjpIq
    stg: ${self:custom.stageVars.dev}
    prd:
      region: us-east-1
      data_bucket: "arn:aws:s3:::tmg-api-data-prd-e08bbe743c81"
      vpc:
        securityGroupIds:
          - sg-02f3c6c3b0ac6cdb3
        subnetIds:
          - subnet-093a8f537a70dfd4d
          - subnet-01ad0640e7bff4e0a
      forwarderArn: arn:aws:lambda:us-east-1:729911029963:function:DatadogIntegration-ForwarderStack-XVMH0A-Forwarder-SGfRbOdHeb42

  lambdaInsights:
    # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-extension-versionsx86-64.html 
    lambdaInsightsVersion: 52

  pythonRequirements:
    dockerizePip: true
    dockerFile: pip/Dockerfile
    dockerExtraFiles:
      - /usr/lib/x86_64-linux-gnu/libpq.so.5
      - /usr/lib/x86_64-linux-gnu/libssl.so.1.1
      - /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
      - /usr/lib/x86_64-linux-gnu/libldap_r-2.4.so.2
      - /usr/lib/x86_64-linux-gnu/liblber-2.4.so.2
      - /usr/lib/x86_64-linux-gnu/libsasl2.so.2
      - /usr/lib/x86_64-linux-gnu/libgnutls.so.30
      - /usr/lib/x86_64-linux-gnu/libnettle.so.8
      - /usr/lib/x86_64-linux-gnu/libhogweed.so.6

  # https://github.com/amplify-education/serverless-domain-manager/tree/main 
  customDomain:
    domainName: "api.${sls:stage}.tmgcorp.net"
    basePath: ''
    certificateName: '*.${sls:stage}.tmgcorp.net'
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    autoDomain: true
    apiType: rest

  datadog_profiler: false

  # https://docs.datadoghq.com/serverless/libraries_integrations/plugin/
  datadog:
    enabled: true
    site: us5.datadoghq.com
    apiKey: ${ssm:/sls/datadog/api_key}
    appKey: ${ssm:/sls/datadog/app_key}
    failOnError: true
    logLevel: DEBUG
    env: ${sls:stage}
    service: tmg-api
    subdomain: "api.${sls:stage}.tmgcorp.net"
    redirectHandlers: ${self:custom.datadog_profiler}
    enableDDLogs: ${self:custom.datadog_profiler}
    enableXrayTracing: ${self:custom.datadog_profiler}
    enableDDTracing: ${self:custom.datadog_profiler}
    enableProfiling: false
    enableSourceCodeIntegration: false
    uploadGitMetadata: false
    enableColdStartTracing: ${self:custom.datadog_profiler}
    addLayers: ${self:custom.datadog_profiler}
    addExtension: ${self:custom.datadog_profiler}
    captureLambdaPayload: ${self:custom.datadog_profiler}
    encodeAuthorizerContext: false
    decodeAuthorizerContext: false
    subscribeToAccessLogs: true
    subscribeToExecutionLogs: true
    forwarderArn: ${self:custom.stageVars.${sls:stage}.forwarderArn}

package:
  artifact: ${param:artifact, ""}
  exclude:
    - .serverless/**
    - .tox/**
    - .build/**
    - .git/**
    - '.vscode/**'
    - node_modules/**
    - venv/**
    - doc/**
    - "__pycache__/**"
    - "**/__pycache__/**"
    - ".#*"
    - "build/**"
    - "pip/**"
    - "env/**"
    - "scripts/**"
    - "tests/**"