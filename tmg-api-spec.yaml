openapi: 3.0.3
info:
  title: The Modern Groom API
  description: API for The Modern Groom, providing a platform to manage users, events, and orders for a modern event planning experience.
  version: "1.0.0"
servers:
  - url: 'https://api.themoderngroom.com/v1'
tags:
  - name: Users
    description: Operations related to user accounts, including registration, profile management, and user-specific queries.
  - name: Events
    description: All event-related actions such as creating, updating, listing, and managing event details.
  - name: Orders
    description: Manages customer orders including order creation, retrieval, updating, and tracking.
  - name: Catalog
    description: Handles catalog items, encompassing product listings, item details, and catalog management operations.
  - name: Audit
    description: Provides access to audit logs, tracking changes made within the system for compliance and monitoring.
paths:
  /users:
    get:
      tags:
        - Users
        - Users List
      summary: Lists all users
      operationId: listUsers
      responses:
        '200':
          description: An array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
        - Users Create
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        x-body-name: user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
  /users/{userId}:
    get:
      tags:
        - Users
        - Users Get
      summary: Get a single user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique ID of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - Users
        - Users Update
      summary: Update a user by ID
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique ID of the user to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '404':
          description: User not found
  /events:
    get:
      tags:
        - Events
      summary: Lists all events
      operationId: listEvents
      responses:
        '200':
          description: An array of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - Events
      summary: Create event
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created
  /orders:
    get:
      tags:
        - Orders
        - Orders List
      summary: Retrieve all orders, optionally filtered by user ID or event ID
      operationId: getOrders
      parameters:
        - name: user_id
          in: query
          description: Optional user ID to filter orders
          required: false
          schema:
            type: integer
            format: int64
        - name: event_id
          in: query
          description: Optional event ID to filter orders
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: An array of orders, filtered by user ID or event ID if provided
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Orders
        - Orders Create
      summary: Create order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
  /orders/{orderId}:
    get:
      tags:
        - Orders
        - Orders Get
      summary: Retrieve a specific order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          description: Unique identifier of the order to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Details of the specific order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      tags:
        - Orders
        - Orders Update
      summary: Update an existing order by ID
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: Unique identifier of the order to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
        '404':
          description: Order not found
        '400':
          description: Invalid input
  /catalog:
    get:
      tags:
        - Catalog
      summary: Lists all catalog items
      operationId: listCatalogItems
      responses:
        '200':
          description: An array of catalog items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
    post:
      tags:
        - Catalog
      summary: Create catalog item
      operationId: createCatalogItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogItem'
      responses:
        '201':
          description: Catalog item created
  /audit:
    get:
      tags:
        - Audit
      summary: Lists all audit entries
      operationId: listAuditEntries
      responses:
        '200':
          description: An array of audit log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        email:
          type: string
        size:
          type: string
      required:
        - username
        - email
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
        date:
          type: string
          format: date-time
      required:
        - type
        - date
    OrderItem:
      type: object
      properties:
        catalog_item_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: float
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        user_id:
          type: integer
          format: int64
        event_id:
          type: integer
          format: int64
        order_date:
          type: string
          format: date-time
        shipped_date:
          type: string
          format: date-time
        received_date:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - user_id
        - event_id
        - order_date
        - items
    CatalogItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
      required:
        - name
        - price
    AuditLog:
      type: object
      properties:
        id:
          type: integer
